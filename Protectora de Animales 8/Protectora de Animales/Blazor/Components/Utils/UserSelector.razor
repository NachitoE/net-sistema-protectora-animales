<MudDataGrid Items="@userList"
             @bind-SelectedItem="SelectedUser"
             SelectOnRowClick="true"
             Hover="true"
             Bordered="true"
             Dense="true"
             RowClassFunc="@GetRowClassUser"
             RowClass="pointer">
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="ID" />
        <PropertyColumn Property="x => x.Name" Title="Nombre" />
        <PropertyColumn Property="x => x.SurName" Title="Apellido" />
        <PropertyColumn Property="x => x.DNI" Title="DNI" />
        <PropertyColumn Property="x => x.UserType" Title="Tipo de Usuario" />
    </Columns>

</MudDataGrid>
@code {
    [Parameter]
    public Action<UserDTO?>? OnUserSelected { get; set; } = null;
    [Parameter]
    public UserClientLoadMethod LoadMethod { get; set; } = UserClientLoadMethod.All;

    public bool IsLoading { get; set; } = true;
    public UserDTO? SelectedUser
    {
        get => _selectedUser;
        set
        {
            if (_selectedUser != value)
            {
                _selectedUser = value;
                OnUserSelected?.Invoke(value);
            }
        }
    }
    private UserDTO? _selectedUser;
    public List<UserDTO> userList { get; set; } = new();

    private Dictionary<UserClientLoadMethod, Func<Task<ApiResult<List<UserDTO>>>>> loadMethodsDict = new()
    {
        {UserClientLoadMethod.All, () => ApiClientsFactory.UserClient().GetAllAsync()},
        {UserClientLoadMethod.AvailableToAdopt, () => ApiClientsFactory.UserClient().GetAvailableToAdoptAsync()},
    };

    private string GetRowClassUser(UserDTO user, int _rowIndex)
    {
        if (SelectedUser != null && user.Id == SelectedUser.Id)
        {
            return "selected-row";
        }
        return string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var result = await loadMethodsDict[LoadMethod]();
        if (result.Success)
        {
            userList = result.Data?.ToList() ?? new List<UserDTO>();
        }
        IsLoading = false;
    }

    public enum UserClientLoadMethod
    {
        All,
        AvailableToAdopt,
    }
}
