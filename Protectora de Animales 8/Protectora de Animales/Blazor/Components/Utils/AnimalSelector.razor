<MudDataGrid Items="@animalList"
             @bind-SelectedItem="SelectedAnimal"
             SelectOnRowClick="true"
             Hover="true"
             Bordered="true"
             Dense="true"
             RowClassFunc="@GetRowClassAnimal"
             RowClass="pointer">
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="ID" />
        <PropertyColumn Property="x => x.Name" Title="Nombre" />
        <PropertyColumn Property="x => x.AnimalState" Title="Estado" />
        <PropertyColumn Property="x => x.BirthDate" Title="Fecha de nacimiento" />
        <PropertyColumn Property="x => x.Description" Title="Descripción" />
        
    </Columns>

</MudDataGrid>
@code {
    [Parameter]
    public Action<AnimalDTO?>? OnAnimalSelected { get; set; } = null;
    [Parameter]
    public AnimalClientLoadMethod LoadMethod { get; set; } = AnimalClientLoadMethod.All;

    public bool IsLoading { get; set; } = true;
    public AnimalDTO? SelectedAnimal
    {
        get => _selectedAnimal;
        set
        {
            if (_selectedAnimal != value)
            {
                _selectedAnimal = value;
                OnAnimalSelected?.Invoke(value);
            }
        }
    }
    private AnimalDTO? _selectedAnimal;
    public List<AnimalDTO> animalList { get; set; } = new();

    private Dictionary<AnimalClientLoadMethod, Func<Task<ApiResult<List<AnimalDTO>>>>> loadMethodsDict = new()
    {
        {AnimalClientLoadMethod.All, () => ApiClientsFactory.AnimalClient().GetAllAsync()},
        {AnimalClientLoadMethod.Available, () => ApiClientsFactory.AnimalClient().GetAllAvailableAnimalsAsync()},
        {AnimalClientLoadMethod.AvailableForAdopt, () => ApiClientsFactory.AnimalClient().GetAllAvailableForAdoptAnimalsAsync()},
    };

    private string GetRowClassAnimal(AnimalDTO user, int _rowIndex)
    {
        if (SelectedAnimal != null && user.Id == SelectedAnimal.Id)
        {
            return "selected-row";
        }
        return string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var result = await loadMethodsDict[LoadMethod]();
        if (result.Success)
        {
            animalList = result.Data?.ToList() ?? new List<AnimalDTO>();
        }
        IsLoading = false;
    }

    public enum AnimalClientLoadMethod
    {
        All,
        Available,
        AvailableForAdopt,
    }
}
