@page "/assign-responsible"

<h3>Asignar Responsable</h3>
@if (!Session.IsAuthenticated || Session.Context.User.UserType != "Admin")
{
    <p>No autorizado</p>
}
else if (isAnimalLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Secondary" Size="MudBlazor.Size.Medium" StrokeWidth="6" />
}
else if (errorMessage != null)
{
    <div class="alert-danger">ERROR: @errorMessage</div>
}
else
{
    <h4 class="mb-1">Seleccione el animal al que le quiere asignar un usuario:</h4>
    <MudDataGrid Items="@availableAnimals"
                 @bind-SelectedItem="SelectedAnimal"
                 SelectOnRowClick="true"
                 Hover="true"
                 Bordered="true"
                 Dense="true"
                 RowClassFunc="@GetRowClassAnimal"
                 RowClass="pointer"
    >
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Nombre" />
            <PropertyColumn Property="x => x.Description" Title="Descripción" />
            <PropertyColumn Property="x => x.BirthDate" Title="Fecha de Nacimiento" />
        </Columns>
    </MudDataGrid>
}
@if (isUserLoading && !isAnimalLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Secondary" Size="MudBlazor.Size.Medium" StrokeWidth="6" />
}
else if(SelectedAnimal != null)
{
    <div class="mt-3">
        <h4 class="mb-1">Seleccione el usuario a asignar:</h4>
    <MudDataGrid Items="@availableUsersToAdopt"
                 @bind-SelectedItem="SelectedUser"
                 SelectOnRowClick="true"
                 Hover="true"
                 Bordered="true"
                 Dense="true"
                 RowClassFunc="@GetRowClassUser"
                 RowClass="pointer">
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Nombre" />
            <PropertyColumn Property="x => x.SurName" Title="Apellido" />

            <TemplateColumn Title="Cantidad Disponible">
                <CellTemplate Context="row">
                    @(remainingQuantityDict[row.Item])
                </CellTemplate>
            </TemplateColumn>
        </Columns>

    </MudDataGrid>
        
    </div>
    <MudButton OnClick="@OnAssignClicked" Disabled="@isAssigning" Class="mt-5" Variant="Variant.Filled" Color="Color.Primary">Asignar</MudButton>
<div class="alert-danger">@(errorAssigningMessage == null ? "" : $"ERROR: {errorAssigningMessage}")</div>

}

@code {
    private bool isAnimalLoading = true;
    private bool isUserLoading = true;
    private string? errorMessage = null;
    private AnimalDTO? SelectedAnimal { get; set; }
    private UserDTO? SelectedUser { get; set; }
    private List<AnimalDTO> availableAnimals = new();
    private List<UserDTO> availableUsersToAdopt = new();
    private Dictionary<UserDTO, int> remainingQuantityDict = new();
    private string? errorAssigningMessage = null;
    private bool isAssigning = false;

    protected override async Task OnInitializedAsync()
    {
        var aAnimalsResult = await ApiClientsFactory.AnimalClient().GetAllAvailableAnimalsAsync();
        isAnimalLoading = false;
        if (!aAnimalsResult.Success)
        {
            errorMessage = aAnimalsResult.Message;
            return;
        }
        availableAnimals = aAnimalsResult.Data!;

        var aUsersResult = await ApiClientsFactory.UserClient().GetAvailableToAdoptAsync();

        if (!aUsersResult.Success)
        {
            errorMessage = aUsersResult.Message;
            isUserLoading = false;
            return;
        }
        availableUsersToAdopt = aUsersResult.Data!;
        //get remaining quantity and map to dict
        foreach (UserDTO u in availableUsersToAdopt)
        {
            int value = await GetRemainingQuantity(u.Id);
            remainingQuantityDict.Add(u, value);
        }

        isUserLoading = false;
    }

    private async Task OnAssignClicked(MouseEventArgs args)
    {
        isAssigning = true;
        var res = await ApiClientsFactory.AnimalClient().AssignResponsible(SelectedAnimal!.Id, SelectedUser!.Id);
        if (!res.Success)
        {
            errorAssigningMessage = res.Message;
            isAssigning = false;
            return;
        }
        Snackbar.Add("Responsable asignado correctamente", Severity.Success);
        isAssigning = false;
        await Reset();
    }

    private string GetRowClassAnimal(AnimalDTO? animal, int index)
      => SelectedAnimal?.Id == animal?.Id ? "selected-row" : string.Empty;
    private string GetRowClassUser(UserDTO? animal, int index)
    => SelectedUser?.Id == animal?.Id ? "selected-row" : string.Empty;
    private async Task<int> GetRemainingQuantity(string userId)
    { 
        var res = await ApiClientsFactory.UserClient().GetUserRemainingCapacity(userId);
        int available = res.Data != null ? res.Data.RemainingCapacity : 0;
        return available;
    }

    private async Task Reset()
    {
        isAnimalLoading = true;
        isUserLoading = true;
        SelectedAnimal = null;
        SelectedUser = null;
        await OnInitializedAsync();
    }
}