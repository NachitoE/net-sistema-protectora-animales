@page "/modify-users"
@using DTOs.House
@using Helpers;
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<h3>Modificar Usuarios</h3>
@if (!Session.IsAuthenticated || Session.Context.User.UserType != "Admin")
{
    <p>No autorizado</p>
}
else if (isLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Secondary" Size="MudBlazor.Size.Medium" StrokeWidth="6" />
}
else if (errorMessage != null)
{
    <div>ERROR: @errorMessage</div>
}
else
{
    <MudDataGrid Items="@elements"
                 ReadOnly="false"
                 EditMode="DataGridEditMode.Form"
                 CommittedItemChanges="@OnCommittedItemChangesHandler"
                 EditTrigger="DataGridEditTrigger.Manual"
                 Bordered="true"
                 Dense="true">
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Nombre" />
            <PropertyColumn Property="x => x.SurName" Title="Apellido" />
            <PropertyColumn Property="x => x.UserName" Title="Usuario" />
            <PropertyColumn Property="x => x.UserType" Title="Tipo">
                <EditTemplate>
                    <MudSelect @bind-Value="context.Item.UserType" Required Margin="Margin.Dense">
                        <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
                        <MudSelectItem Value="@("Voluntario")">Voluntario</MudSelectItem>
                        <MudSelectItem Value="@("Transito")">Tránsito</MudSelectItem>
                    </MudSelect>
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.DNI" Title="DNI" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    private bool isLoading = true;
    private string? errorMessage = null;
    private List<UserDTO> elements = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await ApiClientsFactory.UserClient().GetAllAsync();
        isLoading = false;
        if (!result.Success)
        {
            errorMessage = result.Message;
            return;
        }
        elements = result.Data!.ToList();
    }

    private async Task OnCommittedItemChanges(UserDTO user)
    {
        //es transito? houseload form
        if (user.UserType == EnumConversion.UserTypeToString(Domain.UserType.Transito))
        {
            var houseClient = ApiClientsFactory.HouseClient();
            var existingHouseResult = await houseClient.GetHouseByUserId(user.Id);

            if (existingHouseResult.Success && existingHouseResult.Data != null)
            {
                //ya tiene casa asignada
                Snackbar.Add($"El usuario {user.UserName} ya tiene una casa asignada", Severity.Info);
            }
            else //no tiene casa asignada, se la cargamos
            {
                var parameters = new DialogParameters { ["UserId"] = user.Id };
                var dialog = await DialogService.ShowAsync<HouseLoadDialog>("Asignar Casa", parameters);
                var result = await dialog.Result;

                if (result.Canceled || result.Data == null)
                {
                    Snackbar.Add($"Algo mal salió en la carga de la casa", Severity.Error);
                    return;
                }
                HouseRegisterRequestDTO houseRegReqDTO = (HouseRegisterRequestDTO)result.Data;
                var loadHouseResult = await houseClient.PostAsync(houseRegReqDTO);
                if (!loadHouseResult.Success)
                {
                    Snackbar.Add($"Error: {loadHouseResult.Message}", Severity.Error);
                    return;
                }

                Snackbar.Add($"Casa {loadHouseResult.Data.Address} {loadHouseResult.Data.AddressNumber} asignada a {user.UserName}", Severity.Success);
            }
        }
        //continue normal user update
        var updateResult = await ApiClientsFactory.UserClient().PutAsync(user.Id, user);
        if (!updateResult.Success)
        {
            Snackbar.Add($"Error: {updateResult.Message}", Severity.Error);
            return;
        }
        var updatedUser = updateResult.Data;
        if (updatedUser == null)
        {
            Snackbar.Add($"Usuario {user.UserName} parece haber sido actualizado, pero algo pudo haber ocurrido", Severity.Warning);
            return;
        }
        Snackbar.Add($"Usuario {updatedUser.UserName} actualizado", Severity.Success);
        //si es transito verificar si necesita asignarsele una casa
        

    }

    private EventCallback<UserDTO> OnCommittedItemChangesHandler =>
        EventCallback.Factory.Create<UserDTO>(this, OnCommittedItemChanges);
}